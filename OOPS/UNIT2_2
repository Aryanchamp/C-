Preethi is working at a bookstore and needs to manage the inventory. Her bookstore receives shipments from two different suppliers, and she wants to find the books that are common between the two shipments.



Preethi wants your help to solve her problem. Help her write a program to find the intersection of the two shipment lists based on the book id numbers and help her update the inventory accordingly using pointer arithmetic.

Input format :
The first line contains an integer size1, representing the number of products sold in the first period.

The second line contains size1 integers, representing the product IDs of the sold products in the first period.

The third line contains an integer size2, representing the number of products sold in the second period.

The fourth line contains size2 integers, representing the product IDs of the sold products in the second period.

Output format :
If there are common product IDs, they are printed in a single line separated by spaces.

If there are no common product IDs, the output is "No common IDs found".



Refer to the sample output for formatting specifications.

Code constraints :
In this scenario, the test cases fall under the following constraints:

1 ≤ size1, size2 ≤ 10

1 ≤ product ID ≤ 1000

Sample test cases :
Input 1 :
4
101 110 122 157
3
97 122 157
Output 1 :
122 157 
Input 2 :
3
24 8 9
4 
24 9 10 15
Output 2 :
24 9 
Input 3 :
4
101 102 103 104
3
201 202 203
Output 3 :
No common IDs found


---------------------------------------------------------------------


// You are using GCC
#include <iostream>
using namespace std;


int main(){
    
    int n;
    cin >> n;
    
    int arr[n];
    
    for(int i = 0; i < n; i++){
        cin >> arr[i];
    }
    
    int n1;
    cin >> n1;
    
    int arr1[n1];
    
    for (int i=0; i<n1; i++){
        cin >> arr1[i];
    }
    
    bool common = false;
    
    for (int i = 0; i < n; i++){
        for (int j = 0; j < n1; j++){
            if (arr[i] == arr1[j]){
                cout << arr[i] << " ";
                common = true;
            }
        } 
    }
    
    if(!common){
        cout << "No common IDs found";
    }
    
}
