Guna is developing a banking application that allows customers to deposit money into their accounts. The bank provides each customer with an initial balance of 50 rupees. To facilitate the deposit process, Guna has created a class called AddAmount.



This class represents a transaction to add a specific amount of money to a customer's account. After the transaction is completed, the total amount in the customer's account is printed.

Input format :
The input consists of a single integer, representing the additional amount to be deposited into the customer's account (the deposit amount).

Output format :
The output displays the total amount in the customer's account after the deposit.



Refer to the sample output for formatting specifications.

Code constraints :
The input deposit amount is a non-negative integer.

Sample test cases :
Input 1 :
400
Output 1 :
450
Input 2 :
250
Output 2 :
300



----------------------------------------------------------

#include <iostream>
using namespace std;

// Class to handle bank transactions
class AddAmount {
private:
    int balance;  // Private member to store the account balance

public:
    // Constructor to initialize balance
    AddAmount() : balance(50) {}

    // Method to deposit an amount into the account
    void deposit(int amount) {
        balance += amount;
    }

    // Method to print the total balance
    void printTotal() const {
        cout << balance << endl;
    }
};

int main() {
    int depositAmount;
    cin >> depositAmount;  // Read the deposit amount from the user

    AddAmount account;  // Create an instance of AddAmount
    account.deposit(depositAmount);  // Deposit the amount
    account.printTotal();  // Print the total balance

    return 0;
}
