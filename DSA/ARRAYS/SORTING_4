You are working on a ticketing system for a popular event. As part of the system, you need to implement a feature that finds the kth smallest ticket price among all the available tickets.



Write a program that takes user input for the number of tickets and their respective prices. The program should use the selection sort algorithm to sort the ticket prices in non-decreasing order. After sorting, it should display the sorted order of the ticket prices and display the kth smallest ticket price from the sorted list.



Company Tags: Capgemini 

Input format :
The first line of input consists of an integer n, representing the number of tickets.

The second line of input consists of n space-separated integers, representing the prices of the tickets.

The third line of input consists of an integer k, representing the position of the ticket price to find (1-indexed).

Output format :
The first line of output displays "Sorted order: " followed by n space-separated integers, representing the sorted array of ticket prices.

The second line of output displays "The kth smallest element is: " followed by an integer, representing the kth smallest ticket price.



Refer to the sample output for formatting specifications.

Code constraints :
In this scenario, the test cases fall under the following constraints:

1 ≤ n ≤ 15

1 ≤ k < n

1 ≤ ticket price ≤ 100

Sample test cases :
Input 1 :
5
1 4 7 8 5
3
Output 1 :
Sorted order: 1 4 5 7 8 
The kth smallest element is: 5


--------------------------------------------------------------------------------------------



#include <iostream>
#include <vector>
using namespace std;

void selectionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; ++i) {
        int min_index = i;
        for (int j = i + 1; j < n; ++j) {
            if (arr[j] < arr[min_index]) {
                min_index = j;
            }
        }
        if (min_index != i) {
            swap(arr[i], arr[min_index]);
        }
    }
}

int main() {
    int n, k;
    cin >> n;
    
    // Validate n
    if (n <= 0) {
        cerr << "Invalid number of elements." << endl;
        return 1;
    }
    
    vector<int> ticketPrices(n);
    for (int i = 0; i < n; ++i) {
        cin >> ticketPrices[i];
    }
    
    cin >> k;
    
    // Validate k
    if (k <= 0 || k > n) {
        cerr << "Invalid value for k. Must be between 1 and " << n << "." << endl;
        return 1;
    }
    
    // Perform selection sort
    selectionSort(ticketPrices);
    
    // Output sorted order
    cout << "Sorted order: ";
    for (int i = 0; i < n; ++i) {
        cout << ticketPrices[i] << " ";
    }
    cout << endl;
    
    // Output the k-th smallest element
    cout << "The Kth smallest element is: " << ticketPrices[k - 1] << endl;
    
    return 0;
}
