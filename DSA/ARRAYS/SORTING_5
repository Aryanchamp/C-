Given an array of integers, implement the insertion sort algorithm that sorts elements at odd positions in descending order and elements at even positions in ascending order. Input consists of an integer n followed by n integers. Output the sorted array. Here, the position starts from 1.



Example



Input:

array[] = {7, 10, 11, 3, 6, 9, 2, 13, 0}



Output:      

11 3 7 9 6 10 2 13 0 



Explanation:

Even-positioned elements are 10 3 9 13. After sorting in ascending order: 3 9 10 13

Odd-positioned elements are 7 11 6 2 0. After sorting in descending order: 11 7 6 2 0

Final combined array: 11 3 7 9 6 10 2 13 0 

Input format :
The first line of input consists of an integer N, representing the number of elements.

The second line consists of N space-separated integers representing the elements.

Output format :
The output displays the sorted array as described in the problem statement, separated by a space.



﻿Refer to the sample output for formatting specifications.

Code constraints :
In this scenario, the test cases fall under the following constraints:

1 ≤ N ≤ 30

0 ≤ elements ≤ 105

Sample test cases :
Input 1 :
5
1 2 3 4 5
Output 1 :
5 2 3 4 1 
Input 2 :
9
7 10 11 3 6 9 2 13 0
Output 2 :
11 3 7 9 6 10 2 13 0 


--------------------------------------------------------------------------------------------


#include <iostream>
#include <vector>
#include <algorithm> // For std::sort
using namespace std;

// Function to sort elements at odd positions in descending order
void sortOddPositionsDescending(vector<int>& arr) {
    vector<int> oddElements;
    for (int i = 0; i < arr.size(); i += 2) { // 0-based index: odd positions are i = 0, 2, 4, ...
        oddElements.push_back(arr[i]);
    }
    // Sort in descending order
    sort(oddElements.begin(), oddElements.end(), greater<int>());
    
    // Place them back into the array
    int index = 0;
    for (int i = 0; i < arr.size(); i += 2) {
        arr[i] = oddElements[index++];
    }
}

// Function to sort elements at even positions in ascending order
void sortEvenPositionsAscending(vector<int>& arr) {
    vector<int> evenElements;
    for (int i = 1; i < arr.size(); i += 2) { // 0-based index: even positions are i = 1, 3, 5, ...
        evenElements.push_back(arr[i]);
    }
    // Sort in ascending order
    sort(evenElements.begin(), evenElements.end());
    
    // Place them back into the array
    int index = 0;
    for (int i = 1; i < arr.size(); i += 2) {
        arr[i] = evenElements[index++];
    }
}

int main() {
    int n;
    cin >> n;
    
    vector<int> arr(n);
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }
    
    // Sort odd and even positioned elements
    sortOddPositionsDescending(arr);
    sortEvenPositionsAscending(arr);
    
    // Output the sorted array
    for (int i = 0; i < n; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
    
    return 0;
}
