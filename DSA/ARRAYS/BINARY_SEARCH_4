Sarah is organizing her digital photo album, which is arranged in a grid. Each cell in the grid represents a photo with a unique ID. She wants to find the exact position of a specific photo ID within the grid. 



Assist Sarah by writing a program that determines the position of the photo ID in the album using a linear search algorithm.

Input format :
The first line of input consists of an integer, m, representing the number of rows in the album.

The second line consists of an integer, n, representing the number of columns in the album.

The next m lines contain n space-separated integers, representing the photo IDs in the album grid.

The last line of input consists of an integer, target, representing the photo ID Sarah is searching for.

Output format :
The output prints the position of the target photo ID if found. The index starts from 0.

If the photo ID is not found, it prints "Element [target] not found."



Refer to the sample output for the exact format.

Code constraints :
1 ≤ m, n ≤ 10

1 ≤ array elements ≤ 500

Sample test cases :
Input 1 :
3
3
1 2 3
4 5 6
7 8 9
5
Output 1 :
[1][1]
Input 2 :
3
3
1 2 3
4 5 6
7 8 9
10
Output 2 :
Element 10 not found.


------------------------------------------------------------------------------------------------


#include <iostream>
using namespace std;

// Function to perform linear search to find the target in the grid
bool findTargetInGrid(int grid[][10], int m, int n, int target, int& row, int& col) {
    for (row = 0; row < m; ++row) {
        for (col = 0; col < n; ++col) {
            if (grid[row][col] == target) {
                return true; // Target found
            }
        }
    }
    return false; // Target not found
}

int main() {
    int m, n;
    cin >> m >> n;
    
    int grid[10][10]; // Assuming max dimensions based on constraints
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            cin >> grid[i][j];
        }
    }
    
    int target;
    cin >> target;
    
    int row, col;
    
    // Perform linear search to find the target in the grid
    bool found = findTargetInGrid(grid, m, n, target, row, col);
    
    // Output the result
    if (found) {
        cout << "[" << row << "][" << col << "]" << endl;
    } else {
        cout << "Element " << target << " not found." << endl;
    }
    
    return 0;
}// You are using GCC
